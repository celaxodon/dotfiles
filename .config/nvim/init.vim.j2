set runtimepath^=~/.vim runtimepath+=~/.vim/after
let &packpath = &runtimepath

let g:python3_host_prog = '{{ python3_venv_loc }}bin/python3'

set mouse=v                 " paste with middle mouse buttom

filetype plugin indent on   " allows auto-indenting based on file type

"-----------"
" Old VIMRC "
"-----------"

set modelines=0		" CVE-2007-2438

"""""""""""""""""""
""" General and UI
"""""""""""""""""""

" 256 colors
set t_Co=256
" Re-read an open file that has changed outside of vim
set autoread
" Use the filename for window title
set title
" changes tab and return chars, when visible, to triangle and return symbol, respectively
"set listchars=tab:▸\ ,eol:¬
" Don't wrap lines
"set nowrap
" Show line numbers by default
set nu
" Set spellcheck on
" Change with `:set spell` or `:set nospell`
"set spell spelllang=en_us
" Have a vertical buffer around the cursor when scrolling
set scrolloff=2
" Turn on screen flash for errors
set visualbell

" Always display tabline, even if only one tab
"set showtabline=2
" Hide default insert comment below status bar
set noshowmode
" Set width of non-ascii characters
set ambiwidth=single

"""""""""""""""""
""" Code folding
"""""""""""""""""
" Don't fold by default
set nofoldenable
" Fold based on indent level
set foldmethod=indent
" Deepest fold is 10 levels
set foldnestmax=2
" ???
set foldlevel=0

" Set the starting fold level when editing another buffer in a window
"   0 = all folds closed
"   1 = some folds closed
"   99 = no folds closed
set foldlevelstart=1


""""""""""""
""" Plugins
""""""""""""

" Manage plugs with :PlugInstall  | :PlugUpdate | :PlugClean | :PlugStatus
call plug#begin('~/.config/nvim/plugged')

" Directory structure from vim
Plug 'scrooloose/nerdtree'

" surround sections of text
Plug 'machakann/vim-sandwich'

" comment out blocks of text
Plug 'tpope/vim-commentary'

" Fill in 'end' for Elixir/Ruby
Plug 'tpope/vim-endwise', { 'for': ['elixir', 'ruby'] }

Plug 'tpope/vim-abolish'

" A fuzzy file finder
Plug 'ctrlpvim/ctrlp.vim'

" Cross-language formatting support
Plug 'Chiel92/vim-autoformat'

" Elixir indentation + syntax highlighting
Plug 'elixir-editors/vim-elixir', { 'for': 'elixir' }

" Rust syntax highlighting
Plug 'rust-lang/rust.vim'

" Vim  support for Golang
" :GoBuild to build; :GoInstall to install; :GoTest for full tests;
" :GoTestFunc for single test
" :GoRun - execute current file
" :GoDef - go to symbol/declaration
" :GoInstallBinaries - install deps with 'go get'
" See docs with :help vim-go
" Plug 'fatih/vim-go', { 'for': 'golang' }

Plug 'rhysd/conflict-marker.vim'

" tmux status line. Integrates with lightline/airline
Plug 'edkolev/tmuxline.vim'

"""""""""""""""""""
""" Neovim Plugins
"""""""""""""""""""
" Plug 'nvim-lualine/lualine.nvim'

" :AirlineTheme <theme>
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" for icons in your statusline. Integrates with lualine.vim
Plug 'kyazdani42/nvim-web-devicons'

" Neovim language server protocol configuration
Plug 'neovim/nvim-lspconfig'

" Autocompletion
" CoCInstall coc-json coc-tsserver
" :help coc-nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'nvie/vim-flake8'        " PEP8 checking
Plug 'chriskempson/base16-vim' " Color schemes
Plug 'altercation/vim-colors-solarized'  " Solarized color scheme
Plug 'flazz/vim-colorschemes'   " A TON of colorschemes

" Autocompletion in vim by providing bindings
" to the autocompletion library 'Jedi' for Python.
"Plugin 'davidhalter/jedi-vim'

call plug#end()

let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)

"""""""""""""""""""""
""" CoC Configurations
"""""""""""""""""""""

set hidden 
set encoding=utf-8

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Show docs on cursor hover with <leader>h
nnoremap <silent> <leader>h :call CocActionAsync('doHover')<cr>

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, so you may 
" want to enable 'no' select by `"suggest.noselect": true` in your config file.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by other
" plugins before adding this to your config.
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1) :
    \ CheckBackspace() ? "\<Tab>" :
    \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, so make your own choice
inoremap <silent><expr> <CR> if coc#pum#visible()
  coc#pum#confirm()
endif

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1] =~# '\s'
endfunction

" Use <c-space to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-refenreces)

"Use K toshow documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function!  ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Add `:Format command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" NOTE: LSPInfo for troubleshooting

"""""""""""
""" Ctrl-p
"""""""""""
" help:
" * :help ctrlp.txt
" * :help ctrlp-commands
" * :help ctrlp-extensions
" * :help ctrlp-mappings
"
" F5 to purge cache for current dir to get new files, remove deleted, apply opts

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'

" Use Ripgrep for file finder
if executable('rg')
    set grepprg=rg\ --color=never
    let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
    let g:ctrlp_use_caching = 0
endif

set wildignore+=*/.git/*,*/tmp/*,*.swp,*.swo

"""""""""""""""""""""""""
""" Default Tab behavior
"""""""""""""""""""""""""
" set tabs to 4 spaces
set tabstop=4
" enter spaces when tab is pressed
set expandtab
" The number of spaces to use for indentation
set shiftwidth=4
" Indent to a multiple of 'shiftwidth'
set shiftround


"""""""""""""""""""""""""""""""
""" Filetype specific settings
"""""""""""""""""""""""""""""""
" C-style indentation, according to the C indentation standard.
au BufNewFile,BufRead *.c
    \ set cindent

au BufNewFile,BufRead *.mk,Config.in
    \ set tabstop=8 |
    \ set shiftwidth=0 |
    \ set noexpandtab

" Python
"au BufNewFile,BufRead *.py
"    \ set tabstop=4
"    \ set softtabstop=4
"    \ set shiftwidth=4
"    \ set textwidth=79
"    \ set expandtab
"    \ set autoindent
"    \ set fileformat=unix

" JavaScript, HTML, CSS, XML, YML
au BufNewFile,BufRead *.html,*.css,*.js,*.json,*.xml,*.yml
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

" au BufWrite *.exs,*.ex :Autoformat

" Highlight group for trailing whitespace (but only at ends of lines with
" text):
:highlight BadWhitespace ctermbg=darkgreen guibg=darkgreen

" Flag bad trailing whitespace
"au BufNewFile,BufRead *.py,*.pyw,*.c,*.h,*.rs
"    \ match BadWhitespace /\S\zs\s\+$


""""""""""""""""""""
""" Search behavior
""""""""""""""""""""
" automatically show matching brackets
set showmatch
" use case-sensitivity when you search w/ upper-case chars
set smartcase
" Ignore case when searchign for text
set ignorecase
" Start syntax highlighting, but overrule your colors with defaults.
"syntax on


"""""""""""""
""" Mappings
"""""""""""""
" NOTE: `nmap` is for normal-mode mappings; `map` for normal, visual, select, and operator pending;
" :map! for insert and command modes

" Unicode bindings
" Unicode ✓
:inoremap <leader>c <c-v>u2713

" Test Runners
:map <leader>t :w\|:call SingleTestRunner()<cr>
:map <leader>T :w\|:call MultiTestRunner()<cr>

" create mapping for quick switch between invisibles and visibles. Enable with `\l`
nmap <leader>l :set list!<cr>
" Highlight trailing whitespace
map <leader>w /\s\+$<cr>
" Set pastetoggle with <F3> key. No smart indenting, just pastes as normal.
set pastetoggle=<F3>

:nmap <F2> :NERDTree

""""""""""""""
""" Functions
""""""""""""""

" :call <fn()>
" :h current-file
" :so -> :source
" Copied from Gary Bernhardt
function! SingleTestRunner()
    " Are we in a test file?
    let in_test_file = match(expand("%"), '\(test_.*\.py\|.*_test\.py\|.*_test\.exs\|test_.*\.exs\)$') != -1

    if in_test_file
        let suffix = expand("%:e")
        """ echo 'A test file with suffix:' suffix
        " %:e -- just the suffix, no punctuation
        " %:p -- full path
        " %:t -- filename + suffix
        if match(suffix, "py") != -1
            let cmd = ':!pytest %'
            exec cmd
        elseif match(suffix, "exs") != -1
            let cmd = ':!mix test %'
            exec cmd
        elseif match(suffix, "rs") != -1
            let cmd = ':!cargo test %'
            exec cmd
        elseif match(suffix, "java") != -1
            let cmd = ':!mvn clean % test'
            exec cmd
        else
            echo "Not a Python, Rust or Elixir file"
        end
    else
        echo "Can't run single test runner on this file"
    end
endfunction

function! MultiTestRunner()
    " Check if in a test file, if not, exit
    let in_applicable_file = match(expand("%"), '\(.*\.py\|.*\.exs\|.*\.ex\|.*\.rs\)$') != -1

    if in_applicable_file
        let suffix = expand("%:e")
        if match(suffix, "py") != -1
            let cmd = ':!pytest tests'
            exec cmd
        elseif match(suffix, '\(ex\|exs\)') != -1
            let cmd = ':!mix test'
            exec cmd
        elseif match(suffix, "rs") != -1
            let cmd = ':!cargo test'
            exec cmd
        elseif match(suffix, "java") != -1
            let cmd = ':!mvn clean test'
            exec cmd
        else
            echo "Not a project that can be run with the test runner"
        end
    end
endfunction

""""""""""""""""""
""" Color Schemes
""""""""""""""""""
" syntax enable -- keep your current color settings and turn on syntax
" highlighting. Required for solarized colorschemes

syntax enable

""" Airline theme (nvim/tmux)
" To manually change: :AirlineTheme <tab-complete>
let g:airline_theme='behelit'

colorscheme blackdust
